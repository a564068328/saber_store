package com.listenBook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.listenBook.greendao.Baseuser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BASEUSER.
*/
public class BaseuserDao extends AbstractDao<Baseuser, Long> {

    public static final String TABLENAME = "BASEUSER";

    /**
     * Properties of entity Baseuser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uid = new Property(0, long.class, "uid", true, "UID");
        public final static Property Nick = new Property(1, String.class, "nick", false, "NICK");
        public final static Property Account = new Property(2, String.class, "account", false, "ACCOUNT");
        public final static Property Pwd = new Property(3, String.class, "pwd", false, "PWD");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Date = new Property(5, java.util.Date.class, "date", false, "DATE");
        public final static Property Icon = new Property(6, String.class, "icon", false, "ICON");
        public final static Property Sex = new Property(7, String.class, "sex", false, "SEX");
        public final static Property Signature = new Property(8, String.class, "signature", false, "SIGNATURE");
        public final static Property Contact = new Property(9, String.class, "contact", false, "CONTACT");
        public final static Property Area = new Property(10, String.class, "area", false, "AREA");
        public final static Property Phone = new Property(11, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(12, String.class, "email", false, "EMAIL");
    };


    public BaseuserDao(DaoConfig config) {
        super(config);
    }
    
    public BaseuserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BASEUSER' (" + //
                "'UID' INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: uid
                "'NICK' TEXT NOT NULL ," + // 1: nick
                "'ACCOUNT' TEXT NOT NULL ," + // 2: account
                "'PWD' TEXT NOT NULL ," + // 3: pwd
                "'TYPE' TEXT NOT NULL ," + // 4: type
                "'DATE' INTEGER NOT NULL ," + // 5: date
                "'ICON' TEXT," + // 6: icon
                "'SEX' TEXT," + // 7: sex
                "'SIGNATURE' TEXT," + // 8: signature
                "'CONTACT' TEXT," + // 9: contact
                "'AREA' TEXT," + // 10: area
                "'PHONE' TEXT," + // 11: phone
                "'EMAIL' TEXT);"); // 12: email
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BASEUSER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Baseuser entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUid());
        stmt.bindString(2, entity.getNick());
        stmt.bindString(3, entity.getAccount());
        stmt.bindString(4, entity.getPwd());
        stmt.bindString(5, entity.getType());
        stmt.bindLong(6, entity.getDate().getTime());
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(7, icon);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(8, sex);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(9, signature);
        }
 
        String contact = entity.getContact();
        if (contact != null) {
            stmt.bindString(10, contact);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(11, area);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(12, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(13, email);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Baseuser readEntity(Cursor cursor, int offset) {
        Baseuser entity = new Baseuser( //
            cursor.getLong(offset + 0), // uid
            cursor.getString(offset + 1), // nick
            cursor.getString(offset + 2), // account
            cursor.getString(offset + 3), // pwd
            cursor.getString(offset + 4), // type
            new java.util.Date(cursor.getLong(offset + 5)), // date
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // icon
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // signature
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // contact
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // area
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // phone
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // email
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Baseuser entity, int offset) {
        entity.setUid(cursor.getLong(offset + 0));
        entity.setNick(cursor.getString(offset + 1));
        entity.setAccount(cursor.getString(offset + 2));
        entity.setPwd(cursor.getString(offset + 3));
        entity.setType(cursor.getString(offset + 4));
        entity.setDate(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setIcon(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSex(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSignature(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setContact(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setArea(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPhone(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEmail(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Baseuser entity, long rowId) {
        entity.setUid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Baseuser entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
