package com.listenBook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.listenBook.greendao.ArticleChapterInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ARTICLE_CHAPTER_INFO.
*/
public class ArticleChapterInfoDao extends AbstractDao<ArticleChapterInfo, Long> {

    public static final String TABLENAME = "ARTICLE_CHAPTER_INFO";

    /**
     * Properties of entity ArticleChapterInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CpId = new Property(0, long.class, "cpId", true, "CP_ID");
        public final static Property Aid = new Property(1, long.class, "aid", false, "AID");
        public final static Property CpName = new Property(2, String.class, "cpName", false, "CP_NAME");
        public final static Property CpIcon = new Property(3, String.class, "cpIcon", false, "CP_ICON");
        public final static Property CpUrl = new Property(4, String.class, "cpUrl", false, "CP_URL");
        public final static Property CpDesc = new Property(5, String.class, "cpDesc", false, "CP_DESC");
        public final static Property CpSize = new Property(6, int.class, "cpSize", false, "CP_SIZE");
        public final static Property MCurrency = new Property(7, float.class, "mCurrency", false, "M_CURRENCY");
        public final static Property Dateline = new Property(8, String.class, "Dateline", false, "DATELINE");
    };


    public ArticleChapterInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleChapterInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ARTICLE_CHAPTER_INFO' (" + //
                "'CP_ID' INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: cpId
                "'AID' INTEGER NOT NULL ," + // 1: aid
                "'CP_NAME' TEXT NOT NULL ," + // 2: cpName
                "'CP_ICON' TEXT NOT NULL ," + // 3: cpIcon
                "'CP_URL' TEXT NOT NULL ," + // 4: cpUrl
                "'CP_DESC' TEXT NOT NULL ," + // 5: cpDesc
                "'CP_SIZE' INTEGER NOT NULL ," + // 6: cpSize
                "'M_CURRENCY' REAL NOT NULL ," + // 7: mCurrency
                "'DATELINE' TEXT NOT NULL );"); // 8: Dateline
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ARTICLE_CHAPTER_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ArticleChapterInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCpId());
        stmt.bindLong(2, entity.getAid());
        stmt.bindString(3, entity.getCpName());
        stmt.bindString(4, entity.getCpIcon());
        stmt.bindString(5, entity.getCpUrl());
        stmt.bindString(6, entity.getCpDesc());
        stmt.bindLong(7, entity.getCpSize());
        stmt.bindDouble(8, entity.getMCurrency());
        stmt.bindString(9, entity.getDateline());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ArticleChapterInfo readEntity(Cursor cursor, int offset) {
        ArticleChapterInfo entity = new ArticleChapterInfo( //
            cursor.getLong(offset + 0), // cpId
            cursor.getLong(offset + 1), // aid
            cursor.getString(offset + 2), // cpName
            cursor.getString(offset + 3), // cpIcon
            cursor.getString(offset + 4), // cpUrl
            cursor.getString(offset + 5), // cpDesc
            cursor.getInt(offset + 6), // cpSize
            cursor.getFloat(offset + 7), // mCurrency
            cursor.getString(offset + 8) // Dateline
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ArticleChapterInfo entity, int offset) {
        entity.setCpId(cursor.getLong(offset + 0));
        entity.setAid(cursor.getLong(offset + 1));
        entity.setCpName(cursor.getString(offset + 2));
        entity.setCpIcon(cursor.getString(offset + 3));
        entity.setCpUrl(cursor.getString(offset + 4));
        entity.setCpDesc(cursor.getString(offset + 5));
        entity.setCpSize(cursor.getInt(offset + 6));
        entity.setMCurrency(cursor.getFloat(offset + 7));
        entity.setDateline(cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ArticleChapterInfo entity, long rowId) {
        entity.setCpId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ArticleChapterInfo entity) {
        if(entity != null) {
            return entity.getCpId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
