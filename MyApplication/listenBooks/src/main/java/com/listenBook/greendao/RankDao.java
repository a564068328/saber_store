package com.listenBook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.listenBook.greendao.Rank;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RANK.
*/
public class RankDao extends AbstractDao<Rank, Long> {

    public static final String TABLENAME = "RANK";

    /**
     * Properties of entity Rank.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AId = new Property(0, long.class, "aId", true, "A_ID");
        public final static Property AIcon = new Property(1, String.class, "aIcon", false, "A_ICON");
        public final static Property AName = new Property(2, String.class, "aName", false, "A_NAME");
        public final static Property AAbstract = new Property(3, String.class, "aAbstract", false, "A_ABSTRACT");
        public final static Property AAuthor = new Property(4, String.class, "aAuthor", false, "A_AUTHOR");
        public final static Property Num = new Property(5, int.class, "num", false, "NUM");
        public final static Property Media = new Property(6, long.class, "media", false, "MEDIA");
        public final static Property Type = new Property(7, String.class, "type", false, "TYPE");
        public final static Property Rankid = new Property(8, Integer.class, "rankid", false, "RANKID");
    };


    public RankDao(DaoConfig config) {
        super(config);
    }
    
    public RankDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RANK' (" + //
                "'A_ID' INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: aId
                "'A_ICON' TEXT NOT NULL ," + // 1: aIcon
                "'A_NAME' TEXT NOT NULL ," + // 2: aName
                "'A_ABSTRACT' TEXT NOT NULL ," + // 3: aAbstract
                "'A_AUTHOR' TEXT NOT NULL ," + // 4: aAuthor
                "'NUM' INTEGER NOT NULL ," + // 5: num
                "'MEDIA' INTEGER NOT NULL ," + // 6: media
                "'TYPE' TEXT NOT NULL ," + // 7: type
                "'RANKID' INTEGER);"); // 8: rankid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RANK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Rank entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getAId());
        stmt.bindString(2, entity.getAIcon());
        stmt.bindString(3, entity.getAName());
        stmt.bindString(4, entity.getAAbstract());
        stmt.bindString(5, entity.getAAuthor());
        stmt.bindLong(6, entity.getNum());
        stmt.bindLong(7, entity.getMedia());
        stmt.bindString(8, entity.getType());
 
        Integer rankid = entity.getRankid();
        if (rankid != null) {
            stmt.bindLong(9, rankid);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Rank readEntity(Cursor cursor, int offset) {
        Rank entity = new Rank( //
            cursor.getLong(offset + 0), // aId
            cursor.getString(offset + 1), // aIcon
            cursor.getString(offset + 2), // aName
            cursor.getString(offset + 3), // aAbstract
            cursor.getString(offset + 4), // aAuthor
            cursor.getInt(offset + 5), // num
            cursor.getLong(offset + 6), // media
            cursor.getString(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // rankid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Rank entity, int offset) {
        entity.setAId(cursor.getLong(offset + 0));
        entity.setAIcon(cursor.getString(offset + 1));
        entity.setAName(cursor.getString(offset + 2));
        entity.setAAbstract(cursor.getString(offset + 3));
        entity.setAAuthor(cursor.getString(offset + 4));
        entity.setNum(cursor.getInt(offset + 5));
        entity.setMedia(cursor.getLong(offset + 6));
        entity.setType(cursor.getString(offset + 7));
        entity.setRankid(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Rank entity, long rowId) {
        entity.setAId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Rank entity) {
        if(entity != null) {
            return entity.getAId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
