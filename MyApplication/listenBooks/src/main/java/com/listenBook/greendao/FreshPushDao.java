package com.listenBook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.listenBook.greendao.FreshPush;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FRESH_PUSH.
*/
public class FreshPushDao extends AbstractDao<FreshPush, Long> {

    public static final String TABLENAME = "FRESH_PUSH";

    /**
     * Properties of entity FreshPush.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AId = new Property(0, long.class, "aId", true, "A_ID");
        public final static Property Media = new Property(1, long.class, "media", false, "MEDIA");
        public final static Property AIcon = new Property(2, String.class, "aIcon", false, "A_ICON");
        public final static Property AName = new Property(3, String.class, "aName", false, "A_NAME");
        public final static Property AAbstract = new Property(4, String.class, "aAbstract", false, "A_ABSTRACT");
        public final static Property AAuthor = new Property(5, String.class, "aAuthor", false, "A_AUTHOR");
        public final static Property ChapterNum = new Property(6, int.class, "chapterNum", false, "CHAPTER_NUM");
    };


    public FreshPushDao(DaoConfig config) {
        super(config);
    }
    
    public FreshPushDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FRESH_PUSH' (" + //
                "'A_ID' INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: aId
                "'MEDIA' INTEGER NOT NULL ," + // 1: media
                "'A_ICON' TEXT NOT NULL ," + // 2: aIcon
                "'A_NAME' TEXT NOT NULL ," + // 3: aName
                "'A_ABSTRACT' TEXT NOT NULL ," + // 4: aAbstract
                "'A_AUTHOR' TEXT NOT NULL ," + // 5: aAuthor
                "'CHAPTER_NUM' INTEGER NOT NULL );"); // 6: chapterNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FRESH_PUSH'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FreshPush entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getAId());
        stmt.bindLong(2, entity.getMedia());
        stmt.bindString(3, entity.getAIcon());
        stmt.bindString(4, entity.getAName());
        stmt.bindString(5, entity.getAAbstract());
        stmt.bindString(6, entity.getAAuthor());
        stmt.bindLong(7, entity.getChapterNum());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FreshPush readEntity(Cursor cursor, int offset) {
        FreshPush entity = new FreshPush( //
            cursor.getLong(offset + 0), // aId
            cursor.getLong(offset + 1), // media
            cursor.getString(offset + 2), // aIcon
            cursor.getString(offset + 3), // aName
            cursor.getString(offset + 4), // aAbstract
            cursor.getString(offset + 5), // aAuthor
            cursor.getInt(offset + 6) // chapterNum
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FreshPush entity, int offset) {
        entity.setAId(cursor.getLong(offset + 0));
        entity.setMedia(cursor.getLong(offset + 1));
        entity.setAIcon(cursor.getString(offset + 2));
        entity.setAName(cursor.getString(offset + 3));
        entity.setAAbstract(cursor.getString(offset + 4));
        entity.setAAuthor(cursor.getString(offset + 5));
        entity.setChapterNum(cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FreshPush entity, long rowId) {
        entity.setAId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FreshPush entity) {
        if(entity != null) {
            return entity.getAId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
