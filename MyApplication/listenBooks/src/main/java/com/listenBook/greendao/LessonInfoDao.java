package com.listenBook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.listenBook.greendao.LessonInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LESSON_INFO.
*/
public class LessonInfoDao extends AbstractDao<LessonInfo, Long> {

    public static final String TABLENAME = "LESSON_INFO";

    /**
     * Properties of entity LessonInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Issue = new Property(3, String.class, "issue", false, "ISSUE");
        public final static Property Type = new Property(4, Integer.class, "type", false, "TYPE");
        public final static Property Option = new Property(5, String.class, "option", false, "OPTION");
        public final static Property Answer = new Property(6, String.class, "answer", false, "ANSWER");
        public final static Property User_answer = new Property(7, String.class, "user_answer", false, "USER_ANSWER");
        public final static Property Marks = new Property(8, Integer.class, "marks", false, "MARKS");
    };


    public LessonInfoDao(DaoConfig config) {
        super(config);
    }
    
    public LessonInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LESSON_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'DATE' TEXT NOT NULL ," + // 1: date
                "'TITLE' TEXT," + // 2: title
                "'ISSUE' TEXT," + // 3: issue
                "'TYPE' INTEGER," + // 4: type
                "'OPTION' TEXT," + // 5: option
                "'ANSWER' TEXT," + // 6: answer
                "'USER_ANSWER' TEXT," + // 7: user_answer
                "'MARKS' INTEGER);"); // 8: marks
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LESSON_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LessonInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDate());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String issue = entity.getIssue();
        if (issue != null) {
            stmt.bindString(4, issue);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(5, type);
        }
 
        String option = entity.getOption();
        if (option != null) {
            stmt.bindString(6, option);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(7, answer);
        }
 
        String user_answer = entity.getUser_answer();
        if (user_answer != null) {
            stmt.bindString(8, user_answer);
        }
 
        Integer marks = entity.getMarks();
        if (marks != null) {
            stmt.bindLong(9, marks);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LessonInfo readEntity(Cursor cursor, int offset) {
        LessonInfo entity = new LessonInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // issue
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // option
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // answer
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // user_answer
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // marks
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LessonInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIssue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setOption(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAnswer(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUser_answer(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMarks(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LessonInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LessonInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
