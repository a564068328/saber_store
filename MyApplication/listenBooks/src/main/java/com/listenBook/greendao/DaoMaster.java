package com.listenBook.greendao;


import com.listenBook.greendao.LessonInfoDao;
import com.listenBook.greendao.LessonMarksInfoDao;

import java.io.IOException;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.DbUtils;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.icloud.listenbook.base.GameApp;
import com.icloud.listenbook.base.MigrationHelper;
import com.icloud.listenbook.io.DaoManage;
import com.icloud.wrzjh.base.utils.LogUtil;
import com.icloud.wrzjh.base.utils.SharedPreferenceUtil;
import com.listenBook.greendao.BaseuserDao;
import com.listenBook.greendao.OtherUserDao;
import com.listenBook.greendao.CategoryDao;
import com.listenBook.greendao.MediaDao;
import com.listenBook.greendao.ArticleDao;
import com.listenBook.greendao.ArticleFeedbackDao;
import com.listenBook.greendao.ArticleChapterInfoDao;
import com.listenBook.greendao.RecommendDao;
import com.listenBook.greendao.RankDao;
import com.listenBook.greendao.AdsDao;
import com.listenBook.greendao.DownDao;
import com.listenBook.greendao.CollectDao;
import com.listenBook.greendao.ReadingTrackDao;
import com.listenBook.greendao.FeedbackDao;
import com.listenBook.greendao.ChipFeedbackDao;
import com.listenBook.greendao.ChatMsgDao;
import com.listenBook.greendao.FreshPushDao;
import com.listenBook.greendao.MeritTableAdultDao;
import com.listenBook.greendao.MeritTableChildrenDao;
import com.listenBook.greendao.ChatPeopleInfoDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 1,001): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
	public static final int SCHEMA_VERSION = 10063;

	/** Creates underlying database table using DAOs. */
	public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
		BaseuserDao.createTable(db, ifNotExists);
		OtherUserDao.createTable(db, ifNotExists);
		CategoryDao.createTable(db, ifNotExists);
		MediaDao.createTable(db, ifNotExists);
		ArticleDao.createTable(db, ifNotExists);
		ArticleFeedbackDao.createTable(db, ifNotExists);
		ArticleChapterInfoDao.createTable(db, ifNotExists);
		RecommendDao.createTable(db, ifNotExists);
		RankDao.createTable(db, ifNotExists);
		AdsDao.createTable(db, ifNotExists);
		DownDao.createTable(db, ifNotExists);
		CollectDao.createTable(db, ifNotExists);
		ReadingTrackDao.createTable(db, ifNotExists);
		FeedbackDao.createTable(db, ifNotExists);
		ChipFeedbackDao.createTable(db, ifNotExists);
		ChatMsgDao.createTable(db, ifNotExists);
		FreshPushDao.createTable(db, ifNotExists);
		MeritTableAdultDao.createTable(db, ifNotExists);
		MeritTableChildrenDao.createTable(db, ifNotExists);
		ChatPeopleInfoDao.createTable(db, ifNotExists);
		LessonInfoDao.createTable(db, ifNotExists);
		LessonMarksInfoDao.createTable(db, ifNotExists);
		ArticleChapterRecodeDao.createTable(db, ifNotExists);
		try {
			LogUtil.e("","datas.sql\n\n\n" );
			DbUtils.executeSqlScript(GameApp.instance(), db, "datas.sql");
		} catch (IOException e) {

		}
	}

	/** Drops underlying database table using DAOs. */
	public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
		BaseuserDao.dropTable(db, ifExists);
		OtherUserDao.dropTable(db, ifExists);
		CategoryDao.dropTable(db, ifExists);
		MediaDao.dropTable(db, ifExists);
		ArticleDao.dropTable(db, ifExists);
		ArticleFeedbackDao.dropTable(db, ifExists);
		ArticleChapterInfoDao.dropTable(db, ifExists);
		RecommendDao.dropTable(db, ifExists);
		RankDao.dropTable(db, ifExists);
		AdsDao.dropTable(db, ifExists);
		DownDao.dropTable(db, ifExists);
		CollectDao.dropTable(db, ifExists);
		ReadingTrackDao.dropTable(db, ifExists);
		FeedbackDao.dropTable(db, ifExists);
		ChipFeedbackDao.dropTable(db, ifExists);
		ChatMsgDao.dropTable(db, ifExists);
		FreshPushDao.dropTable(db, ifExists);
		MeritTableAdultDao.dropTable(db, ifExists);
		MeritTableChildrenDao.dropTable(db, ifExists);
		ChatPeopleInfoDao.dropTable(db, ifExists);
		LessonInfoDao.dropTable(db, ifExists);
		LessonMarksInfoDao.dropTable(db, ifExists);
		ArticleChapterRecodeDao.dropTable(db, ifExists);
	}

	public static abstract class OpenHelper extends SQLiteOpenHelper {

		public OpenHelper(Context context, String name, CursorFactory factory) {
			super(context, name, factory, SCHEMA_VERSION);
		}

		@Override
		public void onCreate(SQLiteDatabase db) {
			Log.e("greenDAO", "Creating tables for schema version "
					+ SCHEMA_VERSION);
			SharedPreferenceUtil.clear();// 清除SharedPreference
			dropAllTables(db, true);
			createAllTables(db, false);
		}

		
	}

	/** WARNING: Drops all table on Upgrade! Use only during development. */
	public static class DevOpenHelper extends OpenHelper {
		public DevOpenHelper(Context context, String name, CursorFactory factory) {
			super(context, name, factory);
		}

		@Override
		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
			Log.i("greenDAO", "Upgrading schema from version " + oldVersion
					+ " to " + newVersion + " by dropping all tables");
			dropAllTables(db, true);
			onCreate(db);
		}
	}

	public DaoMaster(SQLiteDatabase db) {
		super(db, SCHEMA_VERSION);
		registerDaoClass(BaseuserDao.class);
		registerDaoClass(OtherUserDao.class);
		registerDaoClass(CategoryDao.class);
		registerDaoClass(MediaDao.class);
		registerDaoClass(ArticleDao.class);
		registerDaoClass(ArticleFeedbackDao.class);
		registerDaoClass(ArticleChapterInfoDao.class);
		registerDaoClass(RecommendDao.class);
		registerDaoClass(RankDao.class);
		registerDaoClass(AdsDao.class);
		registerDaoClass(DownDao.class);
		registerDaoClass(CollectDao.class);
		registerDaoClass(ReadingTrackDao.class);
		registerDaoClass(FeedbackDao.class);
		registerDaoClass(ChipFeedbackDao.class);
		registerDaoClass(ChatMsgDao.class);
		registerDaoClass(FreshPushDao.class);
		registerDaoClass(MeritTableAdultDao.class);
		registerDaoClass(MeritTableChildrenDao.class);
		registerDaoClass(ChatPeopleInfoDao.class);
		registerDaoClass(LessonInfoDao.class);
		registerDaoClass(LessonMarksInfoDao.class);
		registerDaoClass(ArticleChapterRecodeDao.class);
	}

	public DaoSession newSession() {
		return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
	}

	public DaoSession newSession(IdentityScopeType type) {
		return new DaoSession(db, type, daoConfigMap);
	}

}
