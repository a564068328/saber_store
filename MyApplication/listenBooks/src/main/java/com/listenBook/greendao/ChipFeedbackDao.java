package com.listenBook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.listenBook.greendao.ChipFeedback;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CHIP_FEEDBACK.
*/
public class ChipFeedbackDao extends AbstractDao<ChipFeedback, Long> {

    public static final String TABLENAME = "CHIP_FEEDBACK";

    /**
     * Properties of entity ChipFeedback.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Fid = new Property(1, long.class, "fid", false, "FID");
        public final static Property Uid = new Property(2, long.class, "uid", false, "UID");
        public final static Property Dateline = new Property(3, String.class, "dateline", false, "DATELINE");
        public final static Property Msg = new Property(4, String.class, "msg", false, "MSG");
    };


    public ChipFeedbackDao(DaoConfig config) {
        super(config);
    }
    
    public ChipFeedbackDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHIP_FEEDBACK' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FID' INTEGER NOT NULL ," + // 1: fid
                "'UID' INTEGER NOT NULL ," + // 2: uid
                "'DATELINE' TEXT," + // 3: dateline
                "'MSG' TEXT);"); // 4: msg
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHIP_FEEDBACK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChipFeedback entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFid());
        stmt.bindLong(3, entity.getUid());
 
        String dateline = entity.getDateline();
        if (dateline != null) {
            stmt.bindString(4, dateline);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(5, msg);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChipFeedback readEntity(Cursor cursor, int offset) {
        ChipFeedback entity = new ChipFeedback( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // fid
            cursor.getLong(offset + 2), // uid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dateline
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // msg
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChipFeedback entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFid(cursor.getLong(offset + 1));
        entity.setUid(cursor.getLong(offset + 2));
        entity.setDateline(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMsg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChipFeedback entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChipFeedback entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
