package com.listenBook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.listenBook.greendao.OtherUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OTHER_USER.
*/
public class OtherUserDao extends AbstractDao<OtherUser, Long> {

    public static final String TABLENAME = "OTHER_USER";

    /**
     * Properties of entity OtherUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uid = new Property(0, long.class, "uid", true, "UID");
        public final static Property Nick = new Property(1, String.class, "nick", false, "NICK");
        public final static Property Icon = new Property(2, String.class, "icon", false, "ICON");
        public final static Property Sex = new Property(3, String.class, "sex", false, "SEX");
        public final static Property Signature = new Property(4, String.class, "signature", false, "SIGNATURE");
        public final static Property Contact = new Property(5, String.class, "contact", false, "CONTACT");
        public final static Property Area = new Property(6, String.class, "area", false, "AREA");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(8, String.class, "email", false, "EMAIL");
        public final static Property Isfriend = new Property(9, Boolean.class, "isfriend", false, "ISFRIEND");
        public final static Property FriendsCount = new Property(10, Integer.class, "friendsCount", false, "FRIENDS_COUNT");
        public final static Property CollectCount = new Property(11, Integer.class, "collectCount", false, "COLLECT_COUNT");
    };


    public OtherUserDao(DaoConfig config) {
        super(config);
    }
    
    public OtherUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OTHER_USER' (" + //
                "'UID' INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: uid
                "'NICK' TEXT," + // 1: nick
                "'ICON' TEXT," + // 2: icon
                "'SEX' TEXT," + // 3: sex
                "'SIGNATURE' TEXT," + // 4: signature
                "'CONTACT' TEXT," + // 5: contact
                "'AREA' TEXT," + // 6: area
                "'PHONE' TEXT," + // 7: phone
                "'EMAIL' TEXT," + // 8: email
                "'ISFRIEND' INTEGER," + // 9: isfriend
                "'FRIENDS_COUNT' INTEGER," + // 10: friendsCount
                "'COLLECT_COUNT' INTEGER);"); // 11: collectCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OTHER_USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OtherUser entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUid());
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(2, nick);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(3, icon);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(5, signature);
        }
 
        String contact = entity.getContact();
        if (contact != null) {
            stmt.bindString(6, contact);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(7, area);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
 
        Boolean isfriend = entity.getIsfriend();
        if (isfriend != null) {
            stmt.bindLong(10, isfriend ? 1l: 0l);
        }
 
        Integer friendsCount = entity.getFriendsCount();
        if (friendsCount != null) {
            stmt.bindLong(11, friendsCount);
        }
 
        Integer collectCount = entity.getCollectCount();
        if (collectCount != null) {
            stmt.bindLong(12, collectCount);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OtherUser readEntity(Cursor cursor, int offset) {
        OtherUser entity = new OtherUser( //
            cursor.getLong(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nick
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // icon
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // signature
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // contact
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // area
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // email
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isfriend
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // friendsCount
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // collectCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OtherUser entity, int offset) {
        entity.setUid(cursor.getLong(offset + 0));
        entity.setNick(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIcon(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSignature(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContact(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setArea(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsfriend(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setFriendsCount(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setCollectCount(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OtherUser entity, long rowId) {
        entity.setUid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OtherUser entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
