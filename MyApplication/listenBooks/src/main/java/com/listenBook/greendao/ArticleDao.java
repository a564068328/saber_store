package com.listenBook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.listenBook.greendao.Article;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ARTICLE.
*/
public class ArticleDao extends AbstractDao<Article, Long> {

    public static final String TABLENAME = "ARTICLE";

    /**
     * Properties of entity Article.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AId = new Property(0, long.class, "aId", true, "A_ID");
        public final static Property CId = new Property(1, long.class, "cId", false, "C_ID");
        public final static Property AIcon = new Property(2, String.class, "aIcon", false, "A_ICON");
        public final static Property AName = new Property(3, String.class, "aName", false, "A_NAME");
        public final static Property AAbstract = new Property(4, String.class, "aAbstract", false, "A_ABSTRACT");
        public final static Property AAuthor = new Property(5, String.class, "aAuthor", false, "A_AUTHOR");
        public final static Property Price = new Property(6, float.class, "price", false, "PRICE");
        public final static Property ChapterNum = new Property(7, int.class, "chapterNum", false, "CHAPTER_NUM");
        public final static Property ADesc = new Property(8, String.class, "aDesc", false, "A_DESC");
        public final static Property V1Price = new Property(9, Float.class, "v1Price", false, "V1_PRICE");
        public final static Property V2Price = new Property(10, Float.class, "v2Price", false, "V2_PRICE");
        public final static Property V3Price = new Property(11, Float.class, "v3Price", false, "V3_PRICE");
        public final static Property V4Price = new Property(12, Float.class, "v4Price", false, "V4_PRICE");
        public final static Property OtherPrice = new Property(13, Float.class, "otherPrice", false, "OTHER_PRICE");
        public final static Property SalePrice = new Property(14, Float.class, "salePrice", false, "SALE_PRICE");
        public final static Property Status = new Property(15, int.class, "status", false, "STATUS");
        public final static Property ClickConut = new Property(16, Integer.class, "clickConut", false, "CLICK_CONUT");
        public final static Property SubCaterory = new Property(17, String.class, "subCaterory", false, "SUB_CATERORY");
        public final static Property BroadAuthor = new Property(18, String.class, "broadAuthor", false, "BROAD_AUTHOR");
        public final static Property Dateline = new Property(19, String.class, "dateline", false, "DATELINE");
        public final static Property Media = new Property(20, Integer.class, "media", false, "MEDIA");
    };


    public ArticleDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ARTICLE' (" + //
                "'A_ID' INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: aId
                "'C_ID' INTEGER NOT NULL ," + // 1: cId
                "'A_ICON' TEXT NOT NULL ," + // 2: aIcon
                "'A_NAME' TEXT NOT NULL ," + // 3: aName
                "'A_ABSTRACT' TEXT NOT NULL ," + // 4: aAbstract
                "'A_AUTHOR' TEXT NOT NULL ," + // 5: aAuthor
                "'PRICE' REAL NOT NULL ," + // 6: price
                "'CHAPTER_NUM' INTEGER NOT NULL ," + // 7: chapterNum
                "'A_DESC' TEXT," + // 8: aDesc
                "'V1_PRICE' REAL," + // 9: v1Price
                "'V2_PRICE' REAL," + // 10: v2Price
                "'V3_PRICE' REAL," + // 11: v3Price
                "'V4_PRICE' REAL," + // 12: v4Price
                "'OTHER_PRICE' REAL," + // 13: otherPrice
                "'SALE_PRICE' REAL," + // 14: salePrice
                "'STATUS' INTEGER NOT NULL ," + // 15: status
                "'CLICK_CONUT' INTEGER," + // 16: clickConut
                "'SUB_CATERORY' TEXT NOT NULL ," + // 17: subCaterory
                "'BROAD_AUTHOR' TEXT NOT NULL ," + // 18: broadAuthor
                "'DATELINE' TEXT NOT NULL ," + // 19: dateline
                "'MEDIA' INTEGER);"); // 20: media
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ARTICLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Article entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getAId());
        stmt.bindLong(2, entity.getCId());
        stmt.bindString(3, entity.getAIcon());
        stmt.bindString(4, entity.getAName());
        stmt.bindString(5, entity.getAAbstract());
        stmt.bindString(6, entity.getAAuthor());
        stmt.bindDouble(7, entity.getPrice());
        stmt.bindLong(8, entity.getChapterNum());
 
        String aDesc = entity.getADesc();
        if (aDesc != null) {
            stmt.bindString(9, aDesc);
        }
 
        Float v1Price = entity.getV1Price();
        if (v1Price != null) {
            stmt.bindDouble(10, v1Price);
        }
 
        Float v2Price = entity.getV2Price();
        if (v2Price != null) {
            stmt.bindDouble(11, v2Price);
        }
 
        Float v3Price = entity.getV3Price();
        if (v3Price != null) {
            stmt.bindDouble(12, v3Price);
        }
 
        Float v4Price = entity.getV4Price();
        if (v4Price != null) {
            stmt.bindDouble(13, v4Price);
        }
 
        Float otherPrice = entity.getOtherPrice();
        if (otherPrice != null) {
            stmt.bindDouble(14, otherPrice);
        }
 
        Float salePrice = entity.getSalePrice();
        if (salePrice != null) {
            stmt.bindDouble(15, salePrice);
        }
        stmt.bindLong(16, entity.getStatus());
 
        Integer clickConut = entity.getClickConut();
        if (clickConut != null) {
            stmt.bindLong(17, clickConut);
        }
        stmt.bindString(18, entity.getSubCaterory());
        stmt.bindString(19, entity.getBroadAuthor());
        stmt.bindString(20, entity.getDateline());
 
        Integer media = entity.getMedia();
        if (media != null) {
            stmt.bindLong(21, media);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Article readEntity(Cursor cursor, int offset) {
        Article entity = new Article( //
            cursor.getLong(offset + 0), // aId
            cursor.getLong(offset + 1), // cId
            cursor.getString(offset + 2), // aIcon
            cursor.getString(offset + 3), // aName
            cursor.getString(offset + 4), // aAbstract
            cursor.getString(offset + 5), // aAuthor
            cursor.getFloat(offset + 6), // price
            cursor.getInt(offset + 7), // chapterNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // aDesc
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9), // v1Price
            cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10), // v2Price
            cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11), // v3Price
            cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12), // v4Price
            cursor.isNull(offset + 13) ? null : cursor.getFloat(offset + 13), // otherPrice
            cursor.isNull(offset + 14) ? null : cursor.getFloat(offset + 14), // salePrice
            cursor.getInt(offset + 15), // status
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // clickConut
            cursor.getString(offset + 17), // subCaterory
            cursor.getString(offset + 18), // broadAuthor
            cursor.getString(offset + 19), // dateline
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20) // media
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Article entity, int offset) {
        entity.setAId(cursor.getLong(offset + 0));
        entity.setCId(cursor.getLong(offset + 1));
        entity.setAIcon(cursor.getString(offset + 2));
        entity.setAName(cursor.getString(offset + 3));
        entity.setAAbstract(cursor.getString(offset + 4));
        entity.setAAuthor(cursor.getString(offset + 5));
        entity.setPrice(cursor.getFloat(offset + 6));
        entity.setChapterNum(cursor.getInt(offset + 7));
        entity.setADesc(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setV1Price(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
        entity.setV2Price(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
        entity.setV3Price(cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11));
        entity.setV4Price(cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12));
        entity.setOtherPrice(cursor.isNull(offset + 13) ? null : cursor.getFloat(offset + 13));
        entity.setSalePrice(cursor.isNull(offset + 14) ? null : cursor.getFloat(offset + 14));
        entity.setStatus(cursor.getInt(offset + 15));
        entity.setClickConut(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setSubCaterory(cursor.getString(offset + 17));
        entity.setBroadAuthor(cursor.getString(offset + 18));
        entity.setDateline(cursor.getString(offset + 19));
        entity.setMedia(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Article entity, long rowId) {
        entity.setAId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Article entity) {
        if(entity != null) {
            return entity.getAId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
