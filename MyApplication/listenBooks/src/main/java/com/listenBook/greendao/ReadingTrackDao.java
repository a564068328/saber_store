package com.listenBook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.listenBook.greendao.ReadingTrack;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table READING_TRACK.
*/
public class ReadingTrackDao extends AbstractDao<ReadingTrack, Long> {

    public static final String TABLENAME = "READING_TRACK";

    /**
     * Properties of entity ReadingTrack.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Rid = new Property(0, long.class, "rid", true, "RID");
        public final static Property Time = new Property(1, Long.class, "time", false, "TIME");
        public final static Property Pos = new Property(2, Integer.class, "pos", false, "POS");
    };


    public ReadingTrackDao(DaoConfig config) {
        super(config);
    }
    
    public ReadingTrackDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'READING_TRACK' (" + //
                "'RID' INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: rid
                "'TIME' INTEGER," + // 1: time
                "'POS' INTEGER);"); // 2: pos
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'READING_TRACK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ReadingTrack entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getRid());
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time);
        }
 
        Integer pos = entity.getPos();
        if (pos != null) {
            stmt.bindLong(3, pos);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ReadingTrack readEntity(Cursor cursor, int offset) {
        ReadingTrack entity = new ReadingTrack( //
            cursor.getLong(offset + 0), // rid
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // time
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // pos
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ReadingTrack entity, int offset) {
        entity.setRid(cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPos(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ReadingTrack entity, long rowId) {
        entity.setRid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ReadingTrack entity) {
        if(entity != null) {
            return entity.getRid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
