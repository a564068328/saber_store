package com.listenBook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.listenBook.greendao.MeritTableAdult;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MERIT_TABLE_ADULT.
*/
public class MeritTableAdultDao extends AbstractDao<MeritTableAdult, Long> {

    public static final String TABLENAME = "MERIT_TABLE_ADULT";

    /**
     * Properties of entity MeritTableAdult.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, long.class, "uid", false, "UID");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Idea = new Property(3, Integer.class, "idea", false, "IDEA");
        public final static Property Attitude = new Property(4, Integer.class, "attitude", false, "ATTITUDE");
        public final static Property Action = new Property(5, Integer.class, "action", false, "ACTION");
        public final static Property Treat = new Property(6, Integer.class, "treat", false, "TREAT");
        public final static Property Work = new Property(7, Integer.class, "work", false, "WORK");
        public final static Property Belief = new Property(8, Integer.class, "belief", false, "BELIEF");
        public final static Property Other = new Property(9, Integer.class, "other", false, "OTHER");
        public final static Property Gong = new Property(10, Integer.class, "gong", false, "GONG");
        public final static Property Guo = new Property(11, Integer.class, "guo", false, "GUO");
        public final static Property Ideades = new Property(12, String.class, "ideades", false, "IDEADES");
        public final static Property Ideaexc = new Property(13, String.class, "ideaexc", false, "IDEAEXC");
        public final static Property Attitudedes = new Property(14, String.class, "attitudedes", false, "ATTITUDEDES");
        public final static Property Attitudeexc = new Property(15, String.class, "attitudeexc", false, "ATTITUDEEXC");
        public final static Property Actiondes = new Property(16, String.class, "actiondes", false, "ACTIONDES");
        public final static Property Actionexc = new Property(17, String.class, "actionexc", false, "ACTIONEXC");
        public final static Property Treatdes = new Property(18, String.class, "treatdes", false, "TREATDES");
        public final static Property Treatexc = new Property(19, String.class, "treatexc", false, "TREATEXC");
        public final static Property Workdes = new Property(20, String.class, "workdes", false, "WORKDES");
        public final static Property Workexc = new Property(21, String.class, "workexc", false, "WORKEXC");
        public final static Property Beliefdes = new Property(22, String.class, "beliefdes", false, "BELIEFDES");
        public final static Property Beliefexc = new Property(23, String.class, "beliefexc", false, "BELIEFEXC");
        public final static Property Otherdes = new Property(24, String.class, "otherdes", false, "OTHERDES");
        public final static Property Otherexc = new Property(25, String.class, "otherexc", false, "OTHEREXC");
    };


    public MeritTableAdultDao(DaoConfig config) {
        super(config);
    }
    
    public MeritTableAdultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MERIT_TABLE_ADULT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'UID' INTEGER NOT NULL ," + // 1: uid
                "'DATE' TEXT NOT NULL ," + // 2: date
                "'IDEA' INTEGER," + // 3: idea
                "'ATTITUDE' INTEGER," + // 4: attitude
                "'ACTION' INTEGER," + // 5: action
                "'TREAT' INTEGER," + // 6: treat
                "'WORK' INTEGER," + // 7: work
                "'BELIEF' INTEGER," + // 8: belief
                "'OTHER' INTEGER," + // 9: other
                "'GONG' INTEGER," + // 10: gong
                "'GUO' INTEGER," + // 11: guo
                "'IDEADES' TEXT," + // 12: ideades
                "'IDEAEXC' TEXT," + // 13: ideaexc
                "'ATTITUDEDES' TEXT," + // 14: attitudedes
                "'ATTITUDEEXC' TEXT," + // 15: attitudeexc
                "'ACTIONDES' TEXT," + // 16: actiondes
                "'ACTIONEXC' TEXT," + // 17: actionexc
                "'TREATDES' TEXT," + // 18: treatdes
                "'TREATEXC' TEXT," + // 19: treatexc
                "'WORKDES' TEXT," + // 20: workdes
                "'WORKEXC' TEXT," + // 21: workexc
                "'BELIEFDES' TEXT," + // 22: beliefdes
                "'BELIEFEXC' TEXT," + // 23: beliefexc
                "'OTHERDES' TEXT," + // 24: otherdes
                "'OTHEREXC' TEXT);"); // 25: otherexc
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MERIT_TABLE_ADULT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MeritTableAdult entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUid());
        stmt.bindString(3, entity.getDate());
 
        Integer idea = entity.getIdea();
        if (idea != null) {
            stmt.bindLong(4, idea);
        }
 
        Integer attitude = entity.getAttitude();
        if (attitude != null) {
            stmt.bindLong(5, attitude);
        }
 
        Integer action = entity.getAction();
        if (action != null) {
            stmt.bindLong(6, action);
        }
 
        Integer treat = entity.getTreat();
        if (treat != null) {
            stmt.bindLong(7, treat);
        }
 
        Integer work = entity.getWork();
        if (work != null) {
            stmt.bindLong(8, work);
        }
 
        Integer belief = entity.getBelief();
        if (belief != null) {
            stmt.bindLong(9, belief);
        }
 
        Integer other = entity.getOther();
        if (other != null) {
            stmt.bindLong(10, other);
        }
 
        Integer gong = entity.getGong();
        if (gong != null) {
            stmt.bindLong(11, gong);
        }
 
        Integer guo = entity.getGuo();
        if (guo != null) {
            stmt.bindLong(12, guo);
        }
 
        String ideades = entity.getIdeades();
        if (ideades != null) {
            stmt.bindString(13, ideades);
        }
 
        String ideaexc = entity.getIdeaexc();
        if (ideaexc != null) {
            stmt.bindString(14, ideaexc);
        }
 
        String attitudedes = entity.getAttitudedes();
        if (attitudedes != null) {
            stmt.bindString(15, attitudedes);
        }
 
        String attitudeexc = entity.getAttitudeexc();
        if (attitudeexc != null) {
            stmt.bindString(16, attitudeexc);
        }
 
        String actiondes = entity.getActiondes();
        if (actiondes != null) {
            stmt.bindString(17, actiondes);
        }
 
        String actionexc = entity.getActionexc();
        if (actionexc != null) {
            stmt.bindString(18, actionexc);
        }
 
        String treatdes = entity.getTreatdes();
        if (treatdes != null) {
            stmt.bindString(19, treatdes);
        }
 
        String treatexc = entity.getTreatexc();
        if (treatexc != null) {
            stmt.bindString(20, treatexc);
        }
 
        String workdes = entity.getWorkdes();
        if (workdes != null) {
            stmt.bindString(21, workdes);
        }
 
        String workexc = entity.getWorkexc();
        if (workexc != null) {
            stmt.bindString(22, workexc);
        }
 
        String beliefdes = entity.getBeliefdes();
        if (beliefdes != null) {
            stmt.bindString(23, beliefdes);
        }
 
        String beliefexc = entity.getBeliefexc();
        if (beliefexc != null) {
            stmt.bindString(24, beliefexc);
        }
 
        String otherdes = entity.getOtherdes();
        if (otherdes != null) {
            stmt.bindString(25, otherdes);
        }
 
        String otherexc = entity.getOtherexc();
        if (otherexc != null) {
            stmt.bindString(26, otherexc);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MeritTableAdult readEntity(Cursor cursor, int offset) {
        MeritTableAdult entity = new MeritTableAdult( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // uid
            cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // idea
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // attitude
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // action
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // treat
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // work
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // belief
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // other
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // gong
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // guo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ideades
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // ideaexc
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // attitudedes
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // attitudeexc
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // actiondes
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // actionexc
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // treatdes
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // treatexc
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // workdes
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // workexc
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // beliefdes
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // beliefexc
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // otherdes
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25) // otherexc
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MeritTableAdult entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getLong(offset + 1));
        entity.setDate(cursor.getString(offset + 2));
        entity.setIdea(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAttitude(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAction(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTreat(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setWork(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setBelief(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setOther(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setGong(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setGuo(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setIdeades(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIdeaexc(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAttitudedes(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAttitudeexc(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setActiondes(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setActionexc(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTreatdes(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setTreatexc(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setWorkdes(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setWorkexc(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setBeliefdes(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setBeliefexc(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setOtherdes(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setOtherexc(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MeritTableAdult entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MeritTableAdult entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
