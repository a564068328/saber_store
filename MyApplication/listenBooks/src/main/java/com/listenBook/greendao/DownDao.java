package com.listenBook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.listenBook.greendao.Down;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DOWN.
*/
public class DownDao extends AbstractDao<Down, Long> {

    public static final String TABLENAME = "DOWN";

    /**
     * Properties of entity Down.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CpId = new Property(0, long.class, "cpId", true, "CP_ID");
        public final static Property DId = new Property(1, long.class, "dId", false, "D_ID");
        public final static Property AId = new Property(2, long.class, "aId", false, "A_ID");
        public final static Property Uid = new Property(3, long.class, "uid", false, "UID");
    };


    public DownDao(DaoConfig config) {
        super(config);
    }
    
    public DownDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DOWN' (" + //
                "'CP_ID' INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: cpId
                "'D_ID' INTEGER NOT NULL ," + // 1: dId
                "'A_ID' INTEGER NOT NULL ," + // 2: aId
                "'UID' INTEGER NOT NULL );"); // 3: uid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DOWN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Down entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCpId());
        stmt.bindLong(2, entity.getDId());
        stmt.bindLong(3, entity.getAId());
        stmt.bindLong(4, entity.getUid());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Down readEntity(Cursor cursor, int offset) {
        Down entity = new Down( //
            cursor.getLong(offset + 0), // cpId
            cursor.getLong(offset + 1), // dId
            cursor.getLong(offset + 2), // aId
            cursor.getLong(offset + 3) // uid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Down entity, int offset) {
        entity.setCpId(cursor.getLong(offset + 0));
        entity.setDId(cursor.getLong(offset + 1));
        entity.setAId(cursor.getLong(offset + 2));
        entity.setUid(cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Down entity, long rowId) {
        entity.setCpId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Down entity) {
        if(entity != null) {
            return entity.getCpId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
