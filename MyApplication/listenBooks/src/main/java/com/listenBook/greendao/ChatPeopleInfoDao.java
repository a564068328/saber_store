package com.listenBook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.listenBook.greendao.ChatPeopleInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CHAT_PEOPLE_INFO.
*/
public class ChatPeopleInfoDao extends AbstractDao<ChatPeopleInfo, Long> {

    public static final String TABLENAME = "CHAT_PEOPLE_INFO";

    /**
     * Properties of entity ChatPeopleInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uid = new Property(0, long.class, "uid", true, "UID");
        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
        public final static Property Interval_count = new Property(2, Long.class, "interval_count", false, "INTERVAL_COUNT");
        public final static Property Icon = new Property(3, String.class, "icon", false, "ICON");
        public final static Property Nick = new Property(4, String.class, "nick", false, "NICK");
        public final static Property Sex = new Property(5, String.class, "sex", false, "SEX");
        public final static Property Signature = new Property(6, String.class, "signature", false, "SIGNATURE");
        public final static Property Area = new Property(7, String.class, "area", false, "AREA");
        public final static Property Isfriend = new Property(8, Boolean.class, "isfriend", false, "ISFRIEND");
    };


    public ChatPeopleInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ChatPeopleInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHAT_PEOPLE_INFO' (" + //
                "'UID' INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: uid
                "'DATE' INTEGER," + // 1: date
                "'INTERVAL_COUNT' INTEGER," + // 2: interval_count
                "'ICON' TEXT," + // 3: icon
                "'NICK' TEXT," + // 4: nick
                "'SEX' TEXT," + // 5: sex
                "'SIGNATURE' TEXT," + // 6: signature
                "'AREA' TEXT," + // 7: area
                "'ISFRIEND' INTEGER);"); // 8: isfriend
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHAT_PEOPLE_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatPeopleInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUid());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        Long interval_count = entity.getInterval_count();
        if (interval_count != null) {
            stmt.bindLong(3, interval_count);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(4, icon);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(5, nick);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(7, signature);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(8, area);
        }
 
        Boolean isfriend = entity.getIsfriend();
        if (isfriend != null) {
            stmt.bindLong(9, isfriend ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChatPeopleInfo readEntity(Cursor cursor, int offset) {
        ChatPeopleInfo entity = new ChatPeopleInfo( //
            cursor.getLong(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // interval_count
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // icon
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nick
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // signature
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // area
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // isfriend
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatPeopleInfo entity, int offset) {
        entity.setUid(cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setInterval_count(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setIcon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNick(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSex(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSignature(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setArea(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsfriend(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChatPeopleInfo entity, long rowId) {
        entity.setUid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChatPeopleInfo entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
