package com.listenBook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.listenBook.greendao.ChatMsg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CHAT_MSG.
*/
public class ChatMsgDao extends AbstractDao<ChatMsg, Long> {

    public static final String TABLENAME = "CHAT_MSG";

    /**
     * Properties of entity ChatMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Suid = new Property(1, long.class, "Suid", false, "SUID");
        public final static Property Ruid = new Property(2, long.class, "Ruid", false, "RUID");
        public final static Property Icon = new Property(3, String.class, "icon", false, "ICON");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Msg = new Property(5, String.class, "msg", false, "MSG");
        public final static Property Dateline = new Property(6, long.class, "dateline", false, "DATELINE");
    };


    public ChatMsgDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHAT_MSG' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SUID' INTEGER NOT NULL ," + // 1: Suid
                "'RUID' INTEGER NOT NULL ," + // 2: Ruid
                "'ICON' TEXT," + // 3: icon
                "'NAME' TEXT," + // 4: name
                "'MSG' TEXT," + // 5: msg
                "'DATELINE' INTEGER NOT NULL );"); // 6: dateline
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHAT_MSG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSuid());
        stmt.bindLong(3, entity.getRuid());
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(4, icon);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(6, msg);
        }
        stmt.bindLong(7, entity.getDateline());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChatMsg readEntity(Cursor cursor, int offset) {
        ChatMsg entity = new ChatMsg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // Suid
            cursor.getLong(offset + 2), // Ruid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // icon
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // msg
            cursor.getLong(offset + 6) // dateline
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatMsg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSuid(cursor.getLong(offset + 1));
        entity.setRuid(cursor.getLong(offset + 2));
        entity.setIcon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMsg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDateline(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChatMsg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChatMsg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
