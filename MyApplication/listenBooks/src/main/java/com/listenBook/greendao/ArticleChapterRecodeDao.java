package com.listenBook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.listenBook.greendao.ArticleChapterRecode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ARTICLE_CHAPTER_RECODE.
*/
public class ArticleChapterRecodeDao extends AbstractDao<ArticleChapterRecode, Long> {

    public static final String TABLENAME = "ARTICLE_CHAPTER_RECODE";

    /**
     * Properties of entity ArticleChapterRecode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Cpid = new Property(0, long.class, "cpid", true, "CPID");
        public final static Property Aid = new Property(1, Long.class, "aid", false, "AID");
        public final static Property Cid = new Property(2, Long.class, "cid", false, "CID");
        public final static Property Cpname = new Property(3, String.class, "cpname", false, "CPNAME");
        public final static Property Price = new Property(4, Integer.class, "price", false, "PRICE");
        public final static Property Status = new Property(5, Integer.class, "status", false, "STATUS");
        public final static Property Dateline = new Property(6, java.util.Date.class, "dateline", false, "DATELINE");
    };


    public ArticleChapterRecodeDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleChapterRecodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ARTICLE_CHAPTER_RECODE' (" + //
                "'CPID' INTEGER PRIMARY KEY ASC NOT NULL UNIQUE ," + // 0: cpid
                "'AID' INTEGER," + // 1: aid
                "'CID' INTEGER," + // 2: cid
                "'CPNAME' TEXT," + // 3: cpname
                "'PRICE' INTEGER," + // 4: price
                "'STATUS' INTEGER," + // 5: status
                "'DATELINE' INTEGER);"); // 6: dateline
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ARTICLE_CHAPTER_RECODE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ArticleChapterRecode entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCpid());
 
        Long aid = entity.getAid();
        if (aid != null) {
            stmt.bindLong(2, aid);
        }
 
        Long cid = entity.getCid();
        if (cid != null) {
            stmt.bindLong(3, cid);
        }
 
        String cpname = entity.getCpname();
        if (cpname != null) {
            stmt.bindString(4, cpname);
        }
 
        Integer price = entity.getPrice();
        if (price != null) {
            stmt.bindLong(5, price);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(6, status);
        }
 
        java.util.Date dateline = entity.getDateline();
        if (dateline != null) {
            stmt.bindLong(7, dateline.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ArticleChapterRecode readEntity(Cursor cursor, int offset) {
        ArticleChapterRecode entity = new ArticleChapterRecode( //
            cursor.getLong(offset + 0), // cpid
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // aid
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // cid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cpname
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // price
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // status
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // dateline
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ArticleChapterRecode entity, int offset) {
        entity.setCpid(cursor.getLong(offset + 0));
        entity.setAid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCid(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCpname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDateline(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ArticleChapterRecode entity, long rowId) {
        entity.setCpid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ArticleChapterRecode entity) {
        if(entity != null) {
            return entity.getCpid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
