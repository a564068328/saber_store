package com.listenBook.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.listenBook.greendao.LessonMarksInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LESSON_MARKS_INFO.
*/
public class LessonMarksInfoDao extends AbstractDao<LessonMarksInfo, String> {

    public static final String TABLENAME = "LESSON_MARKS_INFO";

    /**
     * Properties of entity LessonMarksInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Date = new Property(0, String.class, "date", true, "DATE");
        public final static Property Chant = new Property(1, String.class, "chant", false, "CHANT");
        public final static Property Marks = new Property(2, Integer.class, "marks", false, "MARKS");
        public final static Property Iscomplete = new Property(3, Boolean.class, "iscomplete", false, "ISCOMPLETE");
        public final static Property Describe = new Property(4, String.class, "describe", false, "DESCRIBE");
        public final static Property Right_count = new Property(5, Integer.class, "right_count", false, "RIGHT_COUNT");
    };


    public LessonMarksInfoDao(DaoConfig config) {
        super(config);
    }
    
    public LessonMarksInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LESSON_MARKS_INFO' (" + //
                "'DATE' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: date
                "'CHANT' TEXT," + // 1: chant
                "'MARKS' INTEGER," + // 2: marks
                "'ISCOMPLETE' INTEGER," + // 3: iscomplete
                "'DESCRIBE' TEXT," + // 4: describe
                "'RIGHT_COUNT' INTEGER);"); // 5: right_count
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LESSON_MARKS_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LessonMarksInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getDate());
 
        String chant = entity.getChant();
        if (chant != null) {
            stmt.bindString(2, chant);
        }
 
        Integer marks = entity.getMarks();
        if (marks != null) {
            stmt.bindLong(3, marks);
        }
 
        Boolean iscomplete = entity.getIscomplete();
        if (iscomplete != null) {
            stmt.bindLong(4, iscomplete ? 1l: 0l);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(5, describe);
        }
 
        Integer right_count = entity.getRight_count();
        if (right_count != null) {
            stmt.bindLong(6, right_count);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LessonMarksInfo readEntity(Cursor cursor, int offset) {
        LessonMarksInfo entity = new LessonMarksInfo( //
            cursor.getString(offset + 0), // date
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chant
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // marks
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // iscomplete
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // describe
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // right_count
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LessonMarksInfo entity, int offset) {
        entity.setDate(cursor.getString(offset + 0));
        entity.setChant(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMarks(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setIscomplete(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setDescribe(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRight_count(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(LessonMarksInfo entity, long rowId) {
        return entity.getDate();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(LessonMarksInfo entity) {
        if(entity != null) {
            return entity.getDate();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
